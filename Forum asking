from pyrosetta import *
from pyrosetta.rosetta import *
from pyrosetta.toolbox import *
from pyrosetta.teaching import *
init("-ignore_unrecognized_res 1 -ex1 -ex2 -flip_HNQ -relax:cartesian -nstruct 200 -crystal_refine -optimization:default_max_cycles 200")
#init()

#Parameter set up#
testPose= Pose()
testPose = pose_from_pdb("1BNI.relax.pdb")
scorefxnDDG=get_fa_scorefxn()

#Firstly relax the structure for later modificiation#
from pyrosetta.rosetta.protocols.relax import FastRelax
scorefxnRelax = pyrosetta.create_score_function("ref2015_cart")
relax = pyrosetta.rosetta.protocols.relax.FastRelax()
relax.constrain_relax_to_start_coords(True)
relax.coord_constrain_sidechains(True)
relax.ramp_down_constraints(False)
relax.cartesian(True)
#relax.min_type("dfpmin_armijo_nonmonotone")
relax.min_type("lbfgs_armijo_nonmonotone")#for non-Cartesian scorefunctions use'dfpmin_armijo_nonmonotone'
relax.set_scorefxn(scorefxnRelax)


s0=scorefxnDDG(testPose) #Record the energy score before cartesian_relax
relax.apply(testPose)
s1=scorefxnDDG(testPose) #Record the energy score after cartesian_relax
#testPose.dump_pdb('1BNI.relax.pdb')

'''
#Residue mutation#
mutatePose=Pose()
mutatePose.assign(testPose) #clone a pose to do the single point mutation
mutate_residue(mutatePose,32,"P")
s2=scorefxnDDG(mutatePose) #Record the energy score after mutation
'''
#Energy minimization
min_mover = MinMover() #define a Mover in type of MinMover
mm=MoveMap()
mm.set_bb_true_range(28,36)
min_mover.movemap(mm)
min_mover.score_function(scorefxnDDG)
#min_mover.min_type("dfpmin")
min_mover.tolerance(0.01)
print(min_mover)
ddG=[]
def minimize_Energy(pose):
    #Minimization#
    min_mover.apply(pose)
    s3=scorefxnDDG(pose)

    #Trial_mover define#
    kT=1
    mc=MonteCarlo(pose,scorefxnDDG,kT)
    mc.boltzmann(pose)
    mc.recover_low(pose)

    trial_mover = TrialMover(min_mover,mc)
    #Monte Carlo#
    for i in range (100):
        trial_mover.apply(pose)
    
    return

#Point mutation#
#AA=['G','A','L','M','F','W','K','Q','E','S','P','V','I','C','Y','H','R','N','D','T']
mp=Pose()
for i in AA:
    mp.assign(testPose)
    mutate_residue(mp,52,i)
    relax.apply(mp)#relax after minimization
    minimize_Energy(mp)
    
    s4=scorefxnDDG(mp)
    dg=s4-s1
    ddG.append(dg)




#Output#
print("The energy before relax: ",s0)
print("The energy after relax: ",s1)
#print("The energy after mutation: ",s2)
#print("The energy after minimization: ",s3)
#print("The energy after Trial minimization: ",s4)
print("The ddG: ")
print(ddG)



'''
AA=['G','A','L','M','F','W','K','Q','E','S','P','V','I','C','Y','H','R','N','D','T']
ddG=[]
mp=Pose()
for i in AA:
    mp.assign(testPose)
    mutate_residue(mp,52,i)
    s2=scorefxnDDG(mp)
    dg=s2-s1
    ddG.append(dg)

print(ddG)
'''
